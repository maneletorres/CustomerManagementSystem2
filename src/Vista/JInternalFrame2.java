package Vista;

import Entitat.Client;
import java.awt.Color;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Manuel Espinosa Torres
 */
public class JInternalFrame2 extends JInternalFrame {

    public JInternalFrame2(JTextField jTextField) {
        JInternalFrame2.jTextField = jTextField;

        initComponents();

        super.setVisible(true);
        super.setClosable(true);
        super.setTitle("Seleccio Clients");
        super.setDefaultCloseOperation(DISPOSE_ON_CLOSE);

        // Element que s'encarrega de notificar quan una cel.la és modificada:
        CellEditorListener changeNotifier = new CellEditorListener() {
            @Override
            public void editingCanceled(ChangeEvent e) {
            }

            @Override
            public void editingStopped(ChangeEvent e) {
                isEditing = false;
            }
        };

        clientJTableForm.getDefaultEditor(String.class).addCellEditorListener(changeNotifier);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        jPanel7 = new javax.swing.JPanel();
        acceptClientJButton = new javax.swing.JButton();
        deleteClientJButton = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        miModelo = new Vista.ClientTableModel(true);
        clientJTableForm = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        clientSearchJLabel = new javax.swing.JLabel();
        clientSearchJTextField = new javax.swing.JTextField();
        addClientJButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        acceptClientJButton.setText("Acceptar");
        acceptClientJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptClientJButtonActionPerformed(evt);
            }
        });

        deleteClientJButton.setText("Borrar");
        deleteClientJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteClientJButtonActionPerformed(evt);
            }
        });

        tableColumnModel = clientJTableForm.getColumnModel();
        clientJTableForm.setModel(miModelo);
        clientJTableForm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clientJTableFormMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                clientJTableFormMousePressed(evt);
            }
        });
        jScrollPane8.setViewportView(clientJTableForm);

        clientSearchJLabel.setText("Busca:");

        clientSearchJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                clientSearchJTextFieldKeyReleased(evt);
            }
        });

        addClientJButton.setText("Afegir Client Sobre Taula");
        addClientJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addClientJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(clientSearchJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clientSearchJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addClientJButton)
                .addGap(63, 63, 63))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clientSearchJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clientSearchJLabel)
                    .addComponent(addClientJButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(acceptClientJButton)
                        .addGap(75, 75, 75)
                        .addComponent(deleteClientJButton)
                        .addGap(226, 226, 226))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 664, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteClientJButton)
                    .addComponent(acceptClientJButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jDesktopPane1.setLayer(jPanel7, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 684, Short.MAX_VALUE)
            .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 232, Short.MAX_VALUE)
            .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void acceptClientJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptClientJButtonActionPerformed
        if (isEditing) {
            JOptionPane.showMessageDialog(this,
                    "No pots acceptar un client mentre estàs editant una cel.la.", "Informació",
                    JOptionPane.INFORMATION_MESSAGE);
        } else {
            int selectedRow = clientJTableForm.getSelectedRow();
            if (selectedRow != -1) {
                Client client = (Client) miModelo.clientData.get(selectedRow);
                if (client.getCodi_id() != null && !client.getCodi_id().equals("")) {
                    jTextField.setText(client.getCodi_id());

                    super.dispose();
                } else {
                    JOptionPane.showMessageDialog(this,
                            "No pots acceptar un client sense seleccionar un registre finalitzat.", "Informació",
                            JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this,
                        "No pots acceptar un client sense seleccionar un registre.", "Informació",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_acceptClientJButtonActionPerformed

    private void deleteClientJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteClientJButtonActionPerformed
        if (isEditing) {
            JOptionPane.showMessageDialog(this,
                    "No pots eliminar un client mentre estàs editant una cel.la.", "Informació",
                    JOptionPane.INFORMATION_MESSAGE);
        } else {
            if (lastSelectedRow != -1) {
                if (!miModelo.getIsClientEditing()) {
                    Client c = (Client) miModelo.clientData.get(lastSelectedRow);
                    if (c.getCodi_id() != null && !c.getCodi_id().equals("")) {
                        int selection = JOptionPane.showConfirmDialog(this,
                                "Estas segur d'eliminar el següent client?\n\n" + c.toString(), "Eliminar",
                                JOptionPane.YES_NO_OPTION,
                                JOptionPane.INFORMATION_MESSAGE);

                        if (selection == JOptionPane.YES_OPTION) {
                            miModelo.removeRow(lastSelectedRow);
                            returnInitialState();
                        }
                    } else {
                        JOptionPane.showMessageDialog(this,
                                "No pots eliminar un client sense seleccionar un registre finalitzat.", "Informació",
                                JOptionPane.INFORMATION_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this,
                            "No pots eliminar un client mentre hi ha un registre per finalitzar.", "Informació",
                            JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this,
                        "No pots eliminar un client sense seleccionar un registre.", "Informació",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_deleteClientJButtonActionPerformed

    private void clientSearchJTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_clientSearchJTextFieldKeyReleased
        // Si no s'està introduint un nou client, es podrà realitzar una búsqueda:
        if (!miModelo.getIsClientEditing()) {
            if (isEditing) {
                int length = clientSearchJTextField.getText().length();

                // Si hi havia text al buscador abans d'introduïr el nou caràcter,
                // no deixarem afegir-ne més, però el text anterior es mantindrà:
                if (length > 1) {
                    clientSearchJTextField.setText(clientSearchJTextField.getText().substring(0, length - 1));
                    // Si en canvi al buscador sols hi ha un caràcter (l'acabat
                    // d'introduïr), borrarem el contingut del buscador per complet:
                } else {
                    clientSearchJTextField.setText("");
                }

                JOptionPane.showMessageDialog(this,
                        "No pots realitzar una búsqueda mentre estàs editant una cel.la.", "Informació",
                        JOptionPane.INFORMATION_MESSAGE);
            } else {
                lastSelectedRow = -1;
                miModelo.performSearch(lastSelectedColumn, clientSearchJTextField.getText());
            }
            // En canvi, si s'està introduint un nou client, no es podrà realitzar una búsqueda:
        } else {
            clientSearchJTextField.setText("");
            JOptionPane.showMessageDialog(this,
                    "No pots realitzar una búsqueda mentre hi ha un registre per finalitzar.", "Informació",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_clientSearchJTextFieldKeyReleased

    private void clientJTableFormMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clientJTableFormMousePressed
        if (evt.getClickCount() == 2) {
            isEditing = true;
        }
    }//GEN-LAST:event_clientJTableFormMousePressed

    private void clientJTableFormMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clientJTableFormMouseClicked
        int selectedRow = clientJTableForm.getSelectedRow();
        int selectedColumn = clientJTableForm.getSelectedColumn();

        // Si polsem sobre una fila diferent a la última fila polsada...:
        if (selectedRow != lastSelectedRow) {
            // ... la última fila polsada serà la fila que acabem de polsar.
            lastSelectedRow = selectedRow;
        }

        // Si polsem cobre una columna diferent a la última columna polsada...:
        if (selectedColumn != lastSelectedColumn) {
            // ... la última columna polsada serà la columna que acabem de polsar.
            lastSelectedColumn = selectedColumn;

            // Si no s'està editant cap cel.la:
            if (!miModelo.getIsClientEditing()) {
                // Açò ens permetrà desplaçar-nos a la nova columna polsada i
                // carregar de nou totes les dades des de cero per poder iniciar
                // una nova búsqueda:
                miModelo.performSearch(lastSelectedColumn, "");
                clientSearchJTextField.setText("");

                // Modifiquem el color del fons de les columnes segons quina estigui
                // seleccionada:
                paintColumns(selectedColumn);
            }
        }

        // Mantenim el focus sobre el registre seleccionat:
        clientJTableForm.requestFocus();
        clientJTableForm.changeSelection(selectedRow, selectedColumn, false, false);
    }//GEN-LAST:event_clientJTableFormMouseClicked

    private void addClientJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addClientJButtonActionPerformed
        if (isEditing) {
            JOptionPane.showMessageDialog(this,
                    "No pots afegir un nou client mentre s'està editant una cel.la.", "Informació",
                    JOptionPane.INFORMATION_MESSAGE);
        } else if (!miModelo.getIsClientEditing()) {
            miModelo.performSearch(lastSelectedColumn, "");
            clientSearchJTextField.setText("");

            Client c = new Client();
            c.setNom(null);
            c.setDni(null);
            c.setCarrer(null);
            c.setCodi_postal(null);
            c.setN_de_portal(null);

            miModelo.addClient(c);
        } else {
            JOptionPane.showMessageDialog(this,
                    "No pots afegir un nou client mentre hi ha un registre per finalitzar.", "Informació",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_addClientJButtonActionPerformed

    public void paintColumns(int selectedColumn) {
        for (int i = 0; i < tableColumnModel.getColumnCount(); i++) {
            renderer = new DefaultTableCellRenderer();

            if (i == selectedColumn) {
                renderer.setBackground(Color.LIGHT_GRAY);
            } else {
                renderer.setBackground(Color.WHITE);
            }

            tableColumnModel.getColumn(i).setCellRenderer(renderer);
        }
    }

    public void returnInitialState() {
        // Açò ens permetrà desplaçar-nos a la nova columna polsada i
        // carregar de nou totes les dades des de cero per poder iniciar
        // una nova búsqueda:
        if (lastSelectedColumn != -1) {
            miModelo.performSearch(lastSelectedColumn, "");
        }

        clientSearchJTextField.setText("");

        // Borrem la selecció de l'últim registre:
        lastSelectedRow = -1;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JInternalFrame2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new JInternalFrame2(jTextField).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptClientJButton;
    private javax.swing.JButton addClientJButton;
    private javax.swing.JTable clientJTableForm;
    private javax.swing.JLabel clientSearchJLabel;
    private javax.swing.JTextField clientSearchJTextField;
    private javax.swing.JButton deleteClientJButton;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane8;
    // End of variables declaration//GEN-END:variables
    private ClientTableModel miModelo;
    private DefaultTableCellRenderer renderer;
    private TableColumnModel tableColumnModel;
    private int lastSelectedRow = -1;
    private int lastSelectedColumn = 2;
    private boolean isEditing = false;
    private static JTextField jTextField;
}
