package Vista;

import static Utilitats.Utilities.createPDF1;
import static Utilitats.Utilities.createPDF2;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.beans.PropertyVetoException;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author Manuel Espinosa Torres
 */
public class FinestraPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form FinestraPrincipal
     */
    public FinestraPrincipal() {
        initComponents();

        super.setTitle("Pràctica final");
        isWindowThrown = false;
        isInternalFrameOpen = false;

        // ComponentAdapter que controla quan es redimensiona l'escriptori:
        jDesktopPane1.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(final ComponentEvent e) {
                width = jDesktopPane1.getWidth();
                height = jDesktopPane1.getHeight();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        optionJMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        exitJMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 979, Short.MAX_VALUE)
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 552, Short.MAX_VALUE)
        );

        optionJMenu.setText("Opcions");

        jMenuItem1.setText("Alta d'animals");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        optionJMenu.add(jMenuItem1);

        jMenuItem2.setText("Clients");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        optionJMenu.add(jMenuItem2);

        exitJMenuItem.setText("Eixir");
        exitJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitJMenuItemActionPerformed(evt);
            }
        });
        optionJMenu.add(exitJMenuItem);

        jMenuBar1.add(optionJMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitJMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitJMenuItemActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        if (!isWindowThrown) {
            JInternalFrame1 jInternalFrame = new JInternalFrame1();
            // Sentència que permet que la finestra llançada aparegui centrada:
            jInternalFrame.setLocation(jDesktopPane1.getWidth() / 2 - jInternalFrame.getSize().width / 2, jDesktopPane1.getHeight() / 2 - jInternalFrame.getSize().height / 2);
            jInternalFrame.addInternalFrameListener(new InternalFrameAdapter() {
                @Override
                public void internalFrameClosed(InternalFrameEvent e) {
                    isWindowThrown = false;
                }
            });
            jDesktopPane1.add(jInternalFrame);

            try {
                jInternalFrame.setSelected(true);
            } catch (PropertyVetoException ex) {
                Logger.getLogger(FinestraPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }

            isWindowThrown = true;
        } else {
            showInfoDialog();
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        JInternalFrame3 jInternalFrame3 = new JInternalFrame3();
        // Sentència que permet que la finestra llançada aparegui centrada:
        jInternalFrame3.setLocation(jDesktopPane1.getWidth() / 2 - jInternalFrame3.getSize().width / 2, jDesktopPane1.getHeight() / 2 - jInternalFrame3.getSize().height / 2);

        if (!isWindowThrown) {
            isWindowThrown = true;

            if (!isInternalFrameOpen) {
                isInternalFrameOpen = true;
                createMenu();
            }

            jInternalFrame3.addInternalFrameListener(new InternalFrameAdapter() {
                @Override
                public void internalFrameClosed(InternalFrameEvent e) {
                    isWindowThrown = false;
                    isInternalFrameOpen = false;
                    jMenuBar1.remove(jMenu);
                }

                @Override
                public void internalFrameDeactivated(InternalFrameEvent e
                ) {
                    jMenu.setVisible(false);
                }

                @Override
                public void internalFrameActivated(InternalFrameEvent e
                ) {
                    jMenu.setVisible(true);
                }
            });
            jDesktopPane1.add(jInternalFrame3);

            try {
                jInternalFrame3.setSelected(true);
            } catch (PropertyVetoException ex) {
                Logger.getLogger(FinestraPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            showInfoDialog();
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    public static int getJDesktopPane1Width() {
        return width;
    }

    public static int getJDesktopPane1Height() {
        return height;
    }

    public void showInfoDialog() {
        JOptionPane.showMessageDialog(this,
                "No pots obrir una nova finestra si ja roman oberta altra.", "Informació",
                JOptionPane.INFORMATION_MESSAGE);
    }

    public void createMenu() {
        jMenu = new JMenu();
        jMenu.setText("Informes");
        jMenu.setVisible(true);

        JMenuItem jMenuItem1 = new JMenuItem();
        jMenuItem1.setText("Llistar animals per client");
        jMenuItem1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                JFileChooserCreation(0);
            }
        });
        jMenu.add(jMenuItem1);

        JMenuItem jMenuItem12 = new JMenuItem();
        jMenuItem12.setText("Llistar animals");
        jMenuItem12.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                JFileChooserCreation(1);
            }
        });
        jMenu.add(jMenuItem12);

        jMenuBar1.add(jMenu);
    }

    // Option 0 --> Llistar animals per client.
    // Option 1 --> Llistar animals.
    public void JFileChooserCreation(int option) {
        try {
            fileChooser = new JFileChooser() {
                @Override
                public void approveSelection() {
                    File file = fileChooser.getSelectedFile();
                    File fileWithoutExtension = new File(file.toString() + ".pdf");
                    if ((file.exists() || fileWithoutExtension.exists()) && getDialogType() == SAVE_DIALOG) {
                        int result = JOptionPane.showConfirmDialog(this, "El fitxer " + file.toString() + " ja existeix. El vols sobreescriure?", "Fitxer existent", JOptionPane.YES_NO_OPTION);
                        switch (result) {
                            case JOptionPane.YES_OPTION:
                                super.approveSelection();
                                return;
                            case JOptionPane.NO_OPTION:
                                return;
                            case JOptionPane.CLOSED_OPTION:
                                return;
                        }
                    }
                    super.approveSelection();
                }
            };
            fileChooser.setFileFilter(new PDFFilter());

            if (option == 0) {
                fileChooser.setSelectedFile(new File("clients.pdf"));
                if (fileChooser.showSaveDialog(jDesktopPane1) == JFileChooser.APPROVE_OPTION) {
                    File file = fileChooser.getSelectedFile();
                    if (!file.toString().substring(Math.max(file.toString().length() - 4, 0)).equals(".pdf")) {
                        file = new File(file.toString() + ".pdf");
                    }

                    createPDF1(file.getAbsolutePath());
                }
            } else if (option == 1) {
                fileChooser.setSelectedFile(new File("animals.pdf"));
                if (fileChooser.showSaveDialog(jDesktopPane1) == JFileChooser.APPROVE_OPTION) {
                    File file = fileChooser.getSelectedFile();
                    if (!file.toString().substring(Math.max(file.toString().length() - 4, 0)).equals(".pdf")) {
                        file = new File(file.toString() + ".pdf");
                    }

                    createPDF2(file.getAbsolutePath());
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(FinestraPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    class PDFFilter extends FileFilter {

        @Override
        public boolean accept(File f) {
            String nombre = f.getName();
            return nombre.substring(Math.max(nombre.length() - 4, 0)).equals(".pdf");
        }

        @Override
        public String getDescription() {
            return "Ficheros de tipo PDF";
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem exitJMenuItem;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenu optionJMenu;
    // End of variables declaration//GEN-END:variables
    private boolean isWindowThrown;
    private boolean isInternalFrameOpen;
    private JFileChooser fileChooser;
    private JMenu jMenu;
    private static int width;
    private static int height;
}
